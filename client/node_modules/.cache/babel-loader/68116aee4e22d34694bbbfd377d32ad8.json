{"ast":null,"code":"var _jsxFileName = \"/Users/brettfitzpatrick/Desktop/Bootcamp/Projects/Mountain-Planner/client/src/pages/Mountain.js\";\nimport React, { useEffect, useState, useContext } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { Col, Row, Container } from \"../components/Grid\";\nimport MountainCard from \"../components/MountainCard\";\nimport API from \"../utils/API\";\n\nfunction Mountain(props) {\n  var hourlyWeather = [];\n  var weatherArray = [];\n  var city = props.city;\n  useEffect(function () {\n    loadWeather();\n  }, []);\n\n  function loadWeather() {\n    fetch(\"https://api.openweathermap.org/data/2.5/onecall?lat=\" + props.lat + \"&lon=\" + props.lon + \"&exclude=minutely&units=imperialappid=9057e02af26cff387f193be4d1eee3ae\").then(function (response) {\n      return response.json();\n    }).then(function (data) {\n      console.log(data);\n\n      for (var i = 1; i < data.daily.length; i++) {\n        var day = new Date(data.daily[i].dt * 1000);\n        var calendarDate = date.getMonth() + 1 + \"/\" + date.getDate() + \"/\" + date.getFullYear();\n      }\n\n      var dayOne = new Date(data.daily[1].dt * 1000);\n      var dayTwo = new Date(data.daily[2].dt * 1000);\n      var dayThree = new Date(data.daily[3].dt * 1000);\n      var dayFour = new Date(data.daily[4].dt * 1000);\n      var dayFive = new Date(data.daily[5].dt * 1000);\n      var daySix = new Date(data.daily[6].dt * 1000);\n      var daySeven = new Date(data.daily[7].dt * 1000);\n      var date = new Date(timestamp * 1000);\n      console.log(date);\n      console.log(\"Date: \" + (date.getMonth() + 1) + \"/\" + date.getDate() + \"/\" + date.getFullYear()); //console.log(date.getDate() + (date.getMonth() + 1) + date.getFullYear());\n\n      hourlyWeather = data.daily;\n      console.log(hourlyWeather);\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(Container, {\n    fluid: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 11\n    }\n  }, \"7-Day Forecast\")), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    size: \"md-10 md-offset-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(MountainCard, {\n    city: city,\n    hourlyWeather: hourlyWeather,\n    weatherArray: weatherArray,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    size: \"md-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Link, {\n    to: \"/\",\n    onClick: props.resetCity,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  }, \"\\u2190 Back to Home\"))));\n}\n\nexport default Mountain;","map":{"version":3,"sources":["/Users/brettfitzpatrick/Desktop/Bootcamp/Projects/Mountain-Planner/client/src/pages/Mountain.js"],"names":["React","useEffect","useState","useContext","Link","useParams","Col","Row","Container","MountainCard","API","Mountain","props","hourlyWeather","weatherArray","city","loadWeather","fetch","lat","lon","then","response","json","data","console","log","i","daily","length","day","Date","dt","calendarDate","date","getMonth","getDate","getFullYear","dayOne","dayTwo","dayThree","dayFour","dayFive","daySix","daySeven","timestamp","resetCity"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { Col, Row, Container } from \"../components/Grid\";\nimport MountainCard from \"../components/MountainCard\";\nimport API from \"../utils/API\";\n\n\nfunction Mountain(props) {\n  let hourlyWeather = [];\n  let weatherArray = [];\n  let city = props.city\n  useEffect(() => {\n    loadWeather()\n  }, []);\n\n  function loadWeather() {\n\n    fetch(\"https://api.openweathermap.org/data/2.5/onecall?lat=\" + props.lat + \"&lon=\" + props.lon + \"&exclude=minutely&units=imperialappid=9057e02af26cff387f193be4d1eee3ae\")\n      .then(response => response.json())\n      .then(data => {\n        console.log(data);\n        for (let i = 1; i < data.daily.length; i++) {\n          let day = new Date(data.daily[i].dt * 1000)\n          let calendarDate = ((date.getMonth()+1)+\"/\"+date.getDate()+\"/\"+date.getFullYear());\n\n        }\n        let dayOne = new Date(data.daily[1].dt * 1000);\n        let dayTwo = new Date(data.daily[2].dt * 1000);\n        let dayThree = new Date(data.daily[3].dt * 1000);\n        let dayFour = new Date(data.daily[4].dt * 1000);\n        let dayFive = new Date(data.daily[5].dt * 1000);\n        let daySix = new Date(data.daily[6].dt * 1000);\n        let daySeven = new Date(data.daily[7].dt * 1000);\n        let date = new Date(timestamp * 1000);\n        console.log(date);\n        console.log(\"Date: \"+(date.getMonth()+1)+\n        \"/\"+date.getDate()+\n        \"/\"+date.getFullYear());\n        //console.log(date.getDate() + (date.getMonth() + 1) + date.getFullYear());\n        hourlyWeather = data.daily;\n        console.log(hourlyWeather)\n      })\n  }\n\n  return (\n      <Container fluid>\n        <Row>\n          <h1>\n            7-Day Forecast\n          </h1>\n        </Row>\n        <Row>\n          <Col size=\"md-10 md-offset-1\">\n            <MountainCard\n              city={city}\n              hourlyWeather={hourlyWeather}\n              weatherArray={weatherArray}\n            />\n          </Col>\n        </Row>\n        <Row>\n          <Col size=\"md-2\">\n            <Link to=\"/\" onClick={props.resetCity}>‚Üê Back to Home</Link>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n\n\nexport default Mountain;\n"]},"metadata":{},"sourceType":"module"}